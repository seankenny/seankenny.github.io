<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Owin | Sean Kenny]]></title>
  <link href="http://www.seankenny.me/blog/categories/owin/atom.xml" rel="self"/>
  <link href="http://www.seankenny.me/"/>
  <updated>2014-08-31T16:29:00+01:00</updated>
  <id>http://www.seankenny.me/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom OWIN IClaimsPrincipal With Ninject]]></title>
    <link href="http://www.seankenny.me/blog/2014/07/25/custom-owin-iclaimsprincipal-with-ninject/"/>
    <updated>2014-07-25T17:33:19+01:00</updated>
    <id>http://www.seankenny.me/blog/2014/07/25/custom-owin-iclaimsprincipal-with-ninject</id>
    <content type="html"><![CDATA[<p>Having recently started using OWIN to handle authorization, I&rsquo;ve had to change a few things throughout my web api projects. To have the user&rsquo;s identity available, I usually create something like:</p>

<!--more-->


<p>```c#</p>

<pre><code>public class MyPrincipal : IMyPrincipal
{
    private readonly ClaimsPrincipal claimsPrincipal;

    public MnsPrincipal(ClaimsPrincipal claimsPrincipal)
    {
        this.claimsPrincipal = claimsPrincipal;
    }

    public string Id
    {
        get
        {
            var claim = claimsPrincipal.Claims.FirstOrDefault(c =&gt; c.Type == ClaimTypes.NameIdentifier);
            return claim != null ? claim.Value : string.Empty;
        }
    }
}

public interface IMyPrincipal
{
    string Id { get; }
}
</code></pre>

<p>```</p>

<p>This will add the <code>ClaimsPrinciple</code> using composition allowing me to use Ninject like this:</p>

<p>```c#</p>

<pre><code>kernel.Bind&lt;IMyPrincipal&gt;()
    .ToMethod(ctx =&gt; new MyPrincipal(HttpContext.Current.GetOwinContext().Authentication.User))
    .InRequestScope();
</code></pre>

<p>```</p>

<p>Now I can get to the logged in user&rsquo;s Id and claims/roles by using constructor injection:</p>

<p>```c#</p>

<pre><code>public class UsersController : ApiController
{
    private readonly IMyPrincipal myPrinciple;

    public UsersController(IMyPrincipal myPrinciple)
    {
        this.myPrinciple = myPrinciple;
    }

    public HttpResponseMessage Get()
    {
        return Request.CreateResponse(HttpStatusCode.OK, myPrinciple.Id); // will contain my NameIdentifier claim type
    }
}
</code></pre>

<p>```</p>

<p>It also allows me to get to the principal when I am no longer in the web api project. My repository/service/flavour of the month class simply has a contructor with the <code>IMyPrincipal</code> argument.</p>

<p>Previously, using FormsAuth, the principal was available as an <code>IPrincipal</code> using <code>HttpContext.Current.User</code> meaning we could use inheritance.  The OWIN approach leads us down the (currently) preferred composition route :&ndash;)</p>
]]></content>
  </entry>
  
</feed>
