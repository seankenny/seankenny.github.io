<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | Sean Kenny]]></title>
  <link href="http://www.seankenny.me/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://www.seankenny.me/"/>
  <updated>2014-09-28T08:57:17+01:00</updated>
  <id>http://www.seankenny.me/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Api and AngularJS - JSON Vulnerability Protection Filter]]></title>
    <link href="http://www.seankenny.me/blog/2014/09/28/web-api-and-angularjs-json-vulnerability-protection-filter/"/>
    <updated>2014-09-28T08:50:48+01:00</updated>
    <id>http://www.seankenny.me/blog/2014/09/28/web-api-and-angularjs-json-vulnerability-protection-filter</id>
    <content type="html"><![CDATA[<h3>The Issue</h3>

<p>From the AngularJS <a href="https://docs.angularjs.org/api/ng/service/$http#json-vulnerability-protection" target="_blank">documentation</a></p>

<blockquote><p>A JSON vulnerability allows third party website to turn your JSON resource URL into JSONP request under some conditions. To counter this your server can prefix all JSON requests with following string &ldquo;)]}&lsquo;,\n&rdquo;. Angular will automatically strip the prefix before processing it as JSON.</p></blockquote>

<p>Phil Haack outlines the issue <a href="http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/" target="_blank">here</a>.</p>

<p>Can we automatically prepend <code>")]}',\n"</code> in Web Api?  Sure!</p>

<h3>The code</h3>

<p>I&rsquo;m going to create a custom JsonConverter by extending the Newtonsoft one that web api uses out of the box:</p>

<p>```c#
public class AngularArrayConverter : JsonConverter
{</p>

<pre><code>public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
    writer.WriteRawValue(")]}',\n");

    writer.WriteStartArray();

    var items = value as IEnumerable;
    if (items == null)
    {
        return;
    }

    foreach (var item in items)
    {
        serializer.Serialize(writer, item, item.GetType());
    }
    writer.WriteEndArray();
}

public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    throw new NotImplementedException();
}

public override bool CanConvert(Type objectType)
{
    // string is an IEnumerable.  This will ensure this converter is only used for arrays
    return !(objectType == typeof(string)) &amp;&amp; typeof(IEnumerable).IsAssignableFrom(objectType);
}

public override bool CanRead
{
    get
    {
        return false;
    }
}
</code></pre>

<p>}
```</p>

<p>Then just plug it in using the WebApiConfig.cs class:</p>

<p>```c#
public static void Register(HttpConfiguration config)
{</p>

<pre><code>// other config stuff here
...

config.Formatters.JsonFormatter.SerializerSettings.Converters.Add(new AngularArrayConverter());
</code></pre>

<p>}
```</p>

<p>Now using fiddler or wireshark we can see the results:</p>

<p><code>javascript
)]}',
[{"id":1,"name":"Sean"},{"id":2,"name":"Mike"}]
</code></p>

<p>AngularJS will handle this automagically as per their documentation.</p>

<p>HTH someone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom OWIN IClaimsPrincipal With Ninject]]></title>
    <link href="http://www.seankenny.me/blog/2014/07/25/custom-owin-iclaimsprincipal-with-ninject/"/>
    <updated>2014-07-25T17:33:19+01:00</updated>
    <id>http://www.seankenny.me/blog/2014/07/25/custom-owin-iclaimsprincipal-with-ninject</id>
    <content type="html"><![CDATA[<p>Having recently started using OWIN to handle authorization, I&rsquo;ve had to change a few things throughout my web api projects. To have the user&rsquo;s identity available, I usually create something like:</p>

<!--more-->


<p>```c#</p>

<pre><code>public class MyPrincipal : IMyPrincipal
{
    private readonly ClaimsPrincipal claimsPrincipal;

    public MnsPrincipal(ClaimsPrincipal claimsPrincipal)
    {
        this.claimsPrincipal = claimsPrincipal;
    }

    public string Id
    {
        get
        {
            var claim = claimsPrincipal.Claims.FirstOrDefault(c =&gt; c.Type == ClaimTypes.NameIdentifier);
            return claim != null ? claim.Value : string.Empty;
        }
    }
}

public interface IMyPrincipal
{
    string Id { get; }
}
</code></pre>

<p>```</p>

<p>This will add the <code>ClaimsPrinciple</code> using composition allowing me to use Ninject like this:</p>

<p>```c#</p>

<pre><code>kernel.Bind&lt;IMyPrincipal&gt;()
    .ToMethod(ctx =&gt; new MyPrincipal(HttpContext.Current.GetOwinContext().Authentication.User))
    .InRequestScope();
</code></pre>

<p>```</p>

<p>Now I can get to the logged in user&rsquo;s Id and claims/roles by using constructor injection:</p>

<p>```c#</p>

<pre><code>public class UsersController : ApiController
{
    private readonly IMyPrincipal myPrinciple;

    public UsersController(IMyPrincipal myPrinciple)
    {
        this.myPrinciple = myPrinciple;
    }

    public HttpResponseMessage Get()
    {
        return Request.CreateResponse(HttpStatusCode.OK, myPrinciple.Id); // will contain my NameIdentifier claim type
    }
}
</code></pre>

<p>```</p>

<p>It also allows me to get to the principal when I am no longer in the web api project. My repository/service/flavour of the month class simply has a contructor with the <code>IMyPrincipal</code> argument.</p>

<p>Previously, using FormsAuth, the principal was available as an <code>IPrincipal</code> using <code>HttpContext.Current.User</code> meaning we could use inheritance.  The OWIN approach leads us down the (currently) preferred composition route :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pretty Printing Xml or Json in HTML With C#]]></title>
    <link href="http://www.seankenny.me/blog/2014/06/28/pretty-printing-xml-or-json-in-html-with-c-number/"/>
    <updated>2014-06-28T12:10:00+01:00</updated>
    <id>http://www.seankenny.me/blog/2014/06/28/pretty-printing-xml-or-json-in-html-with-c-number</id>
    <content type="html"><![CDATA[<p>There are a few different ways to pretty print objects as html in C#.  We have a requirement to pretty print what might be XML or Json.  The following extension method does the trick:
 <!--more-->
```c#
public static string PrettyPrint(this string serialisedInput)
{
  if (string.IsNullOrEmpty(input))
  {</p>

<pre><code>return input;
</code></pre>

<p>  }</p>

<p>  try
  {</p>

<pre><code>return XDocument.Parse(input).ToString();
</code></pre>

<p>  }
  catch (Exception) { }</p>

<p>  try
  {</p>

<pre><code>var t = JsonConvert.DeserializeObject&lt;object&gt;(input);
return JsonConvert.SerializeObject(t, Formatting.Indented);
</code></pre>

<p>  }
  catch (Exception) { }</p>

<p>  return input;
}
```</p>

<p>In our case, we will have previously serialised the object into a datastore:</p>

<p><code>c#
var serialisedItem = "{\"name\":\"sean\",\"roles\":[{\"roleName\":\"editor\"},{\"roleName\":\"admin\"}]}";
</code></p>

<p>or for those of us unfortunate to work in 1998:</p>

<p><code>c#
var serialisedItem = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;Name&gt;sean&lt;/Name&gt;&lt;Roles&gt;&lt;RoleName&gt;editor&lt;/RoleName&gt;&lt;/Roles&gt;&lt;Roles&gt;&lt;RoleName&gt;admin&lt;/RoleName&gt;&lt;/Roles&gt;";
</code></p>

<p>The Html/Razor syntax:</p>

<p>```html</p>

<pre>@serialisedItem.PrettyPrint()</pre>


<p>```</p>

<p>Leads to (ta da!):
```html
{</p>

<pre><code>"name" : "sean",
"roles" : [{
      "roleName" : "editor"
    }, {
      "roleName" : "admin"
    }
]
</code></pre>

<p>}
```</p>

<p>or to:</p>

<p>```html
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo; ?>
<Name>sean</Name>
<Roles></p>

<pre><code>&lt;RoleName&gt;editor&lt;/RoleName&gt;
</code></pre>

<p></Roles>
<Roles></p>

<pre><code>&lt;RoleName&gt;admin&lt;/RoleName&gt;
</code></pre>

<p></Roles>
```</p>
]]></content>
  </entry>
  
</feed>
