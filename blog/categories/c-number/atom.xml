<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | Sean Kenny]]></title>
  <link href="http://www.seankenny.me/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://www.seankenny.me/"/>
  <updated>2014-07-23T19:32:16+01:00</updated>
  <id>http://www.seankenny.me/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pretty Printing Xml or Json in HTML With C#]]></title>
    <link href="http://www.seankenny.me/blog/2014/06/28/pretty-printing-xml-or-json-in-html-with-c-number/"/>
    <updated>2014-06-28T12:10:00+01:00</updated>
    <id>http://www.seankenny.me/blog/2014/06/28/pretty-printing-xml-or-json-in-html-with-c-number</id>
    <content type="html"><![CDATA[<p>There are a few different ways to pretty print objects as html in C#.  We have a requirement to pretty print what might be XML or Json.  The following extension method does the trick:
 <!--more-->
```c#
public static string PrettyPrint(this string serialisedInput)
{
  if (string.IsNullOrEmpty(input))
  {</p>

<pre><code>return input;
</code></pre>

<p>  }</p>

<p>  try
  {</p>

<pre><code>return XDocument.Parse(input).ToString();
</code></pre>

<p>  }
  catch (Exception) { }</p>

<p>  try
  {</p>

<pre><code>var t = JsonConvert.DeserializeObject&lt;object&gt;(input);
return JsonConvert.SerializeObject(t, Formatting.Indented);
</code></pre>

<p>  }
  catch (Exception) { }</p>

<p>  return input;
}
```</p>

<p>In our case, we will have previously serialised the object into a datastore:</p>

<p><code>c#
var serialisedItem = "{\"name\":\"sean\",\"roles\":[{\"roleName\":\"editor\"},{\"roleName\":\"admin\"}]}";
</code></p>

<p>or for those of us unfortunate to work in 1998:</p>

<p><code>c#
var serialisedItem = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;Name&gt;sean&lt;/Name&gt;&lt;Roles&gt;&lt;RoleName&gt;editor&lt;/RoleName&gt;&lt;/Roles&gt;&lt;Roles&gt;&lt;RoleName&gt;admin&lt;/RoleName&gt;&lt;/Roles&gt;";
</code></p>

<p>The Html/Razor syntax:</p>

<p>```html</p>

<pre>@serialisedItem.PrettyPrint()</pre>


<p>```</p>

<p>Leads to (ta da!):
```html
{</p>

<pre><code>"name" : "sean",
"roles" : [{
      "roleName" : "editor"
    }, {
      "roleName" : "admin"
    }
]
</code></pre>

<p>}
```</p>

<p>or to:</p>

<p>```html
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo; ?>
<Name>sean</Name>
<Roles></p>

<pre><code>&lt;RoleName&gt;editor&lt;/RoleName&gt;
</code></pre>

<p></Roles>
<Roles></p>

<pre><code>&lt;RoleName&gt;admin&lt;/RoleName&gt;
</code></pre>

<p></Roles>
```</p>
]]></content>
  </entry>
  
</feed>
