<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fullcalendar | Sean Kenny]]></title>
  <link href="http://www.seankenny.me/blog/categories/fullcalendar/atom.xml" rel="self"/>
  <link href="http://www.seankenny.me/"/>
  <updated>2014-08-13T18:10:53+01:00</updated>
  <id>http://www.seankenny.me/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FullCalendar - With a Resource Day View! - V2-0-2]]></title>
    <link href="http://www.seankenny.me/blog/2014/08/11/fullcalendar-with-a-resource-day-view-v2-0-2/"/>
    <updated>2014-08-11T18:52:44+01:00</updated>
    <id>http://www.seankenny.me/blog/2014/08/11/fullcalendar-with-a-resource-day-view-v2-0-2</id>
    <content type="html"><![CDATA[<h3>v2.0.2 <code>beta!</code></h3>

<p>I&rsquo;ve finally got to updating my fork of Adam Shaw&rsquo;s v2.0.2 <a href="http://arshaw.com/fullcalendar/" target="_blank">Full Calendar</a>.</p>

<p>There are a few changes required if you are going to move from the previous 1.6 version, namely the use of the <a href="http://momentjs.com/" target="_blank">moment.js</a> date library.  I&rsquo;ve used this library previously and you owe it to yourself to take a look.  It takes all that javascript date pain away.</p>

<p>The ResourceDayView I&rsquo;ve added is pretty much a clone of the AgendaDayView so head on over to <a href="http://arshaw.com/fullcalendar/docs/" target="_blank">arshaw.com/fullcalendar/docs</a> to get a feel for the agenda view.</p>

<p>The <a href="https://github.com/arshaw/fullcalendar/wiki/Upgrading-to-v2" target="_blank">upgrade to v2</a> docs cover the diffs in detail.</p>

<h3>Demo</h3>

<p>Take a look at the plunkr demo <a href="http://embed.plnkr.co/cX9dH8eTjKaddJ0Gpw21/preview" target="_blank">here</a>.</p>

<p>In the demo, pop open the developer tools (F12 in chrome) => console and you should see a console log for clicking on events, dragging events, etc.</p>

<h3>Issues</h3>

<p>If you spot any issues, please submit a <a href="https://github.com/seankenny/fullcalendar/issues" target="_blank">github issue</a> with a label of v2.0!</p>

<h3>v2.1</h3>

<p>I see there is a v2.1 release imminent &#42;<em>le sigh</em>&#42;.  It is still in beta and there are a SHED LOAD of internal changes so as soon as it is released I&rsquo;ll start the merge process again.</p>

<h3>Related posts</h3>

<blockquote><p><a href="http://www.seankenny.me/blog/2013/08/14/fullcalendar-with-a-resource-day-view/">FullCalendar &ndash; With a Resource Day View!</a></p>

<p><a href="http://www.seankenny.me/blog/2014/07/24/resource-fullcalendar-dragging-and-clicking/">Resource FullCalendar &ndash; Dragging and Clicking</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resource FullCalendar - Dragging and Clicking]]></title>
    <link href="http://www.seankenny.me/blog/2014/07/24/resource-fullcalendar-dragging-and-clicking/"/>
    <updated>2014-07-24T17:31:05+01:00</updated>
    <id>http://www.seankenny.me/blog/2014/07/24/resource-fullcalendar-dragging-and-clicking</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve previously posted on my &ldquo;addition of resources&rdquo; fork of the fullcalendar javascript control <a href="http://www.seankenny.me/blog/2013/08/14/fullcalendar-with-a-resource-day-view/">here</a>.  Today I want to outline some features around the drag/drop and click events that are a little undiscoverable.</p>

<h3>Select</h3>

<p>To add a select event callback, use the following config setting:</p>

<p>```javascript</p>

<pre><code>....
selectable: true,
select: function(start, end, allDay, ev) {
    console.log(start);
    console.log(end);
    console.log(ev.data);
},
....
</code></pre>

<p>```</p>

<!--more-->


<p>This is triggered when the user clicks (or selects) the calendar (i.e. not on a calendar event).</p>

<p>The start and end date of the the area you click (or click, drag and released) will be available in the first 2 params.  The <code>ev</code> parameter will contain an <code>ev.data</code> property which will contain the resource you clicked on.  In the above example, you would see something like this in chrome&rsquo;s dev tools console window:</p>

<p>```</p>

<pre><code>Thu Jul 24 2014 06:00:00 GMT+0100 (GMT Summer Time) 
Thu Jul 24 2014 09:30:00 GMT+0100 (GMT Summer Time) 
Object {id: "resource1", name: "Resource 1", className: Array[0]}
</code></pre>

<p>```</p>

<p>Do not confuse <code>ev</code> with a calendar <code>event</code>!</p>

<h3>Calendar Event clicking</h3>

<p>To add a calendar event click callback, use the following:</p>

<p>```javascript</p>

<pre><code>....
eventClick: function(event) {
    console.log(event.resources);
},
....
</code></pre>

<p>```</p>

<p>This one is the same as the original fork with the addition of <code>resources</code> which provides the resource id(s) of the calendar event:
```</p>

<pre><code>["resourceid1","resourceid2"]
</code></pre>

<p>```</p>

<h3>Calendar Event drag and drop</h3>

<p>```javascript</p>

<pre><code>....
eventDrop: function (event, delta, revertFunc) {
      console.log(event.resources);
},
....
</code></pre>

<p><code>
</code></p>

<pre><code>["resourceid1","resourceid2"]
</code></pre>

<p>```</p>

<h3>Confusing?</h3>

<p>The resource data available on these are not consistant.  For <code>eventClick</code> and <code>eventDrop</code> the calendar event is returned and this object has the <code>resources</code> array on it with the resource ids.  This is as you would set up the calendar initially.</p>

<p>The <code>select</code> has no event associated with it yet &ndash; you only get the drag start and end date/times.  This is Ok until you need to figure out the resource you are interested in.  The click event has a data property which seems to fit the bill.  Maybe I should add a <code>resources</code> array for the id&rsquo;s instead?  Would lead to:</p>

<p>```javascript</p>

<pre><code>select: function(start, end, allDay, ev, resources) {
    console.log(resources);
}
</code></pre>

<p><code>
</code></p>

<pre><code>["resourceid1"]
</code></pre>

<p>```</p>

<p>All of the above can be seen in action on this <a href="http://embed.plnkr.co/8d16J15gKhE2IKCATspZ/preview">plunkr</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FullCalendar - With a Resource Day View!]]></title>
    <link href="http://www.seankenny.me/blog/2013/08/14/fullcalendar-with-a-resource-day-view/"/>
    <updated>2013-08-14T19:29:00+01:00</updated>
    <id>http://www.seankenny.me/blog/2013/08/14/fullcalendar-with-a-resource-day-view</id>
    <content type="html"><![CDATA[<blockquote><p>Update &ndash; this <a href="http://www.seankenny.me/blog/2014/07/24/resource-fullcalendar-dragging-and-clicking/">Drag and Drop</a> post covers some other aspects of this plug-in.</p></blockquote>

<p><a href="http://arshaw.com/fullcalendar/">FullCalendar</a> is a JavaScript calendar JQuery plug-in.  I&rsquo;ve used it now on 2 projects and it&rsquo;s just great.</p>

<p>So on another project, we needed to be able to see the calendar agenda day view with it split into vertical columns for each &lsquo;resource&rsquo;.  There are a few forks that are doing this with FullCalendar but they aren&rsquo;t really suitable for us.  One has resource rows rather than columns and the other is a fork of an old version of the FullCalendar code.</p>

<p>So I went ahead and forked the source on github.  The goal was to keep the forked version as similar to the core as possible &ndash; that way upstream merging should be easier.</p>

<!--more-->


<h3>Demo</h3>

<p><a href="http://embed.plnkr.co/8d16J15gKhE2IKCATspZ/preview">Here</a> is a working demo of the plugin with resources.</p>

<h3>Code</h3>

<p>The source code of it is <a href="https://github.com/seankenny/fullcalendar">here</a>.  Get the js and css from here &ndash; <a href="https://github.com/seankenny/fullcalendar/tree/master/build/out">https://github.com/seankenny/fullcalendar/tree/master/build/out</a>.</p>

<h3>Usage</h3>

<p>The only difference to the consumer of the plugin is that there is a new option (&lsquo;resources&rsquo;) and there is a new property on the <code>eventObject</code> named <code>resourceId</code> that we use to tie back to the relevant resource.</p>

<p>```javascript
$(&lsquo;#calendar&rsquo;).fullCalendar({
  defaultView: &lsquo;resourceDay&rsquo;,
  resources: [{&lsquo;id&rsquo;:&lsquo;r1&rsquo;,&lsquo;name&rsquo;:&lsquo;Resource 1&rsquo;},{&lsquo;id&rsquo;:&lsquo;r2&rsquo;, &lsquo;name&rsquo;:&lsquo;Resource 2&rsquo;}],
  //resources: &lsquo;data-url&rsquo;  //you can use just a url to your resources data if you want
  events: [
  {</p>

<pre><code>title: 'R1-R2: Lunch 14.00-15.00',
start: '2013-08-21T14:00:00.000Z',
end: '2013-08-21T15:00:00.000Z',
resources: ['r1','r2']
</code></pre>

<p>  }
});
```</p>

<p>The <code>event.resources</code> property can take any of the following formats:</p>

<p><code>javascript
events: [
{
  resources: 'r1'  // to assign this event to the r1 resource
}
// OR
events: [
{
  resources: ['r1']  // to assign this event to the r1 resource
}
// OR
events: [
{
  resources: ['r1','r2']  // to assign this event to the r1 &amp; r2 resources
}
</code></p>

<p>The resources option on the calendar object also accepts a <code>className</code> to allow the styling of the individual resource columns:</p>

<p><code>javascript
$('#calendar').fullCalendar({
  resources: [{'id':'r1', 'name':'Resource 1', 'className' : ['my-class-name']}]
</code></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>
