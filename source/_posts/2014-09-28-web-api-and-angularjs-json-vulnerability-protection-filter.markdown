---
layout: post
title: "Web Api and AngularJS - JSON vulnerability protection filter"
date: 2014-09-28 08:50:48 +0100
comments: true
categories: [c#, angularjs, webapi]
---
###The Issue
From the AngularJS <a href="https://docs.angularjs.org/api/ng/service/$http#json-vulnerability-protection" target="_blank">documentation</a>
> A JSON vulnerability allows third party website to turn your JSON resource URL into JSONP request under some conditions. To counter this your server can prefix all JSON requests with following string ")]}',\n". Angular will automatically strip the prefix before processing it as JSON.

Phil Haack outlines the issue <a href="http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/" target="_blank">here</a>.  

Can we automatically prepend ```")]}',\n"``` in Web Api?  Sure!
<!--more-->
###The code
I'm going to create a custom JsonConverter by extending the Newtonsoft one that web api uses out of the box:

```c#
public class AngularArrayConverter : JsonConverter
{
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        writer.WriteRawValue(")]}',\n");
        
        writer.WriteStartArray();

        var items = value as IEnumerable;
        if (items == null)
        {
            return;
        }

        foreach (var item in items)
        {
            serializer.Serialize(writer, item, item.GetType());
        }
        writer.WriteEndArray();
    }

    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        throw new NotImplementedException();
    }

    public override bool CanConvert(Type objectType)
    {
        // string is an IEnumerable.  This will ensure this converter is only used for arrays
        return !(objectType == typeof(string)) && typeof(IEnumerable).IsAssignableFrom(objectType);
    }

    public override bool CanRead
    {
        get
        {
            return false;
        }
    }
}
```

Then just plug it in using the WebApiConfig.cs class:

```c#
public static void Register(HttpConfiguration config)
{
    // other config stuff here
    ...
    
    config.Formatters.JsonFormatter.SerializerSettings.Converters.Add(new AngularArrayConverter());
}
```

Now using fiddler or wireshark we can see the results:

```javascript
)]}',
[{"id":1,"name":"Sean"},{"id":2,"name":"Mike"}]
```

AngularJS will handle this automagically as per their documentation.

HTH someone.